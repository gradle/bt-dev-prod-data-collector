/*
 * This file is generated by jOOQ.
 */
package org.gradle.devprod.collector.persistence.generated.jooq.tables.records;


import java.time.OffsetDateTime;

import org.gradle.devprod.collector.persistence.generated.jooq.tables.PreconditionProbing;
import org.jooq.Field;
import org.jooq.Record4;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PreconditionProbingRecord extends UpdatableRecordImpl<PreconditionProbingRecord> implements Record8<String[], String, String, String, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.precondition_probing.preconditions</code>.
     */
    public void setPreconditions(String[] value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.precondition_probing.preconditions</code>.
     */
    public String[] getPreconditions() {
        return (String[]) get(0);
    }

    /**
     * Setter for <code>public.precondition_probing.host</code>.
     */
    public void setHost(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.precondition_probing.host</code>.
     */
    public String getHost() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.precondition_probing.test_class</code>.
     */
    public void setTestClass(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.precondition_probing.test_class</code>.
     */
    public String getTestClass() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.precondition_probing.test_task</code>.
     */
    public void setTestTask(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.precondition_probing.test_task</code>.
     */
    public String getTestTask() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.precondition_probing.last_executed</code>.
     */
    public void setLastExecuted(OffsetDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.precondition_probing.last_executed</code>.
     */
    public OffsetDateTime getLastExecuted() {
        return (OffsetDateTime) get(4);
    }

    /**
     * Setter for <code>public.precondition_probing.last_skipped</code>.
     */
    public void setLastSkipped(OffsetDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.precondition_probing.last_skipped</code>.
     */
    public OffsetDateTime getLastSkipped() {
        return (OffsetDateTime) get(5);
    }

    /**
     * Setter for <code>public.precondition_probing.last_failed</code>.
     */
    public void setLastFailed(OffsetDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.precondition_probing.last_failed</code>.
     */
    public OffsetDateTime getLastFailed() {
        return (OffsetDateTime) get(6);
    }

    /**
     * Setter for <code>public.precondition_probing.last_succeeded</code>.
     */
    public void setLastSucceeded(OffsetDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.precondition_probing.last_succeeded</code>.
     */
    public OffsetDateTime getLastSucceeded() {
        return (OffsetDateTime) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record4<String[], String, String, String> key() {
        return (Record4) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<String[], String, String, String, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<String[], String, String, String, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<String[]> field1() {
        return PreconditionProbing.PRECONDITION_PROBING.PRECONDITIONS;
    }

    @Override
    public Field<String> field2() {
        return PreconditionProbing.PRECONDITION_PROBING.HOST;
    }

    @Override
    public Field<String> field3() {
        return PreconditionProbing.PRECONDITION_PROBING.TEST_CLASS;
    }

    @Override
    public Field<String> field4() {
        return PreconditionProbing.PRECONDITION_PROBING.TEST_TASK;
    }

    @Override
    public Field<OffsetDateTime> field5() {
        return PreconditionProbing.PRECONDITION_PROBING.LAST_EXECUTED;
    }

    @Override
    public Field<OffsetDateTime> field6() {
        return PreconditionProbing.PRECONDITION_PROBING.LAST_SKIPPED;
    }

    @Override
    public Field<OffsetDateTime> field7() {
        return PreconditionProbing.PRECONDITION_PROBING.LAST_FAILED;
    }

    @Override
    public Field<OffsetDateTime> field8() {
        return PreconditionProbing.PRECONDITION_PROBING.LAST_SUCCEEDED;
    }

    @Override
    public String[] component1() {
        return getPreconditions();
    }

    @Override
    public String component2() {
        return getHost();
    }

    @Override
    public String component3() {
        return getTestClass();
    }

    @Override
    public String component4() {
        return getTestTask();
    }

    @Override
    public OffsetDateTime component5() {
        return getLastExecuted();
    }

    @Override
    public OffsetDateTime component6() {
        return getLastSkipped();
    }

    @Override
    public OffsetDateTime component7() {
        return getLastFailed();
    }

    @Override
    public OffsetDateTime component8() {
        return getLastSucceeded();
    }

    @Override
    public String[] value1() {
        return getPreconditions();
    }

    @Override
    public String value2() {
        return getHost();
    }

    @Override
    public String value3() {
        return getTestClass();
    }

    @Override
    public String value4() {
        return getTestTask();
    }

    @Override
    public OffsetDateTime value5() {
        return getLastExecuted();
    }

    @Override
    public OffsetDateTime value6() {
        return getLastSkipped();
    }

    @Override
    public OffsetDateTime value7() {
        return getLastFailed();
    }

    @Override
    public OffsetDateTime value8() {
        return getLastSucceeded();
    }

    @Override
    public PreconditionProbingRecord value1(String[] value) {
        setPreconditions(value);
        return this;
    }

    @Override
    public PreconditionProbingRecord value2(String value) {
        setHost(value);
        return this;
    }

    @Override
    public PreconditionProbingRecord value3(String value) {
        setTestClass(value);
        return this;
    }

    @Override
    public PreconditionProbingRecord value4(String value) {
        setTestTask(value);
        return this;
    }

    @Override
    public PreconditionProbingRecord value5(OffsetDateTime value) {
        setLastExecuted(value);
        return this;
    }

    @Override
    public PreconditionProbingRecord value6(OffsetDateTime value) {
        setLastSkipped(value);
        return this;
    }

    @Override
    public PreconditionProbingRecord value7(OffsetDateTime value) {
        setLastFailed(value);
        return this;
    }

    @Override
    public PreconditionProbingRecord value8(OffsetDateTime value) {
        setLastSucceeded(value);
        return this;
    }

    @Override
    public PreconditionProbingRecord values(String[] value1, String value2, String value3, String value4, OffsetDateTime value5, OffsetDateTime value6, OffsetDateTime value7, OffsetDateTime value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PreconditionProbingRecord
     */
    public PreconditionProbingRecord() {
        super(PreconditionProbing.PRECONDITION_PROBING);
    }

    /**
     * Create a detached, initialised PreconditionProbingRecord
     */
    public PreconditionProbingRecord(String[] preconditions, String host, String testClass, String testTask, OffsetDateTime lastExecuted, OffsetDateTime lastSkipped, OffsetDateTime lastFailed, OffsetDateTime lastSucceeded) {
        super(PreconditionProbing.PRECONDITION_PROBING);

        setPreconditions(preconditions);
        setHost(host);
        setTestClass(testClass);
        setTestTask(testTask);
        setLastExecuted(lastExecuted);
        setLastSkipped(lastSkipped);
        setLastFailed(lastFailed);
        setLastSucceeded(lastSucceeded);
        resetChangedOnNotNull();
    }
}
