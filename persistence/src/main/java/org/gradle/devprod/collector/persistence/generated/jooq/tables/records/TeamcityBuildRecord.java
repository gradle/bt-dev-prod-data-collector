/*
 * This file is generated by jOOQ.
 */
package org.gradle.devprod.collector.persistence.generated.jooq.tables.records;


import java.time.OffsetDateTime;

import org.gradle.devprod.collector.persistence.generated.jooq.tables.TeamcityBuild;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record14;
import org.jooq.Row14;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TeamcityBuildRecord extends UpdatableRecordImpl<TeamcityBuildRecord> implements Record14<String, String, OffsetDateTime, OffsetDateTime, OffsetDateTime, String, String, String, String, String, String[], Boolean, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.teamcity_build.build_id</code>.
     */
    public void setBuildId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.teamcity_build.build_id</code>.
     */
    public String getBuildId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.teamcity_build.configuration</code>.
     */
    public void setConfiguration(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.teamcity_build.configuration</code>.
     */
    public String getConfiguration() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.teamcity_build.queued</code>.
     */
    public void setQueued(OffsetDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.teamcity_build.queued</code>.
     */
    public OffsetDateTime getQueued() {
        return (OffsetDateTime) get(2);
    }

    /**
     * Setter for <code>public.teamcity_build.started</code>.
     */
    public void setStarted(OffsetDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.teamcity_build.started</code>.
     */
    public OffsetDateTime getStarted() {
        return (OffsetDateTime) get(3);
    }

    /**
     * Setter for <code>public.teamcity_build.finished</code>.
     */
    public void setFinished(OffsetDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.teamcity_build.finished</code>.
     */
    public OffsetDateTime getFinished() {
        return (OffsetDateTime) get(4);
    }

    /**
     * Setter for <code>public.teamcity_build.state</code>.
     */
    public void setState(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.teamcity_build.state</code>.
     */
    public String getState() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.teamcity_build.status</code>.
     */
    public void setStatus(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.teamcity_build.status</code>.
     */
    public String getStatus() {
        return (String) get(6);
    }

    /**
     * Setter for <code>public.teamcity_build.status_text</code>.
     */
    public void setStatusText(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.teamcity_build.status_text</code>.
     */
    public String getStatusText() {
        return (String) get(7);
    }

    /**
     * Setter for <code>public.teamcity_build.branch</code>.
     */
    public void setBranch(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.teamcity_build.branch</code>.
     */
    public String getBranch() {
        return (String) get(8);
    }

    /**
     * Setter for <code>public.teamcity_build.git_commit_id</code>.
     */
    public void setGitCommitId(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>public.teamcity_build.git_commit_id</code>.
     */
    public String getGitCommitId() {
        return (String) get(9);
    }

    /**
     * Setter for <code>public.teamcity_build.buildscan_urls</code>.
     */
    public void setBuildscanUrls(String[] value) {
        set(10, value);
    }

    /**
     * Getter for <code>public.teamcity_build.buildscan_urls</code>.
     */
    public String[] getBuildscanUrls() {
        return (String[]) get(10);
    }

    /**
     * Setter for <code>public.teamcity_build.composite</code>.
     */
    public void setComposite(Boolean value) {
        set(11, value);
    }

    /**
     * Getter for <code>public.teamcity_build.composite</code>.
     */
    public Boolean getComposite() {
        return (Boolean) get(11);
    }

    /**
     * Setter for <code>public.teamcity_build.build_host_name</code>.
     */
    public void setBuildHostName(String value) {
        set(12, value);
    }

    /**
     * Getter for <code>public.teamcity_build.build_host_name</code>.
     */
    public String getBuildHostName() {
        return (String) get(12);
    }

    /**
     * Setter for <code>public.teamcity_build.build_host_type</code>.
     */
    public void setBuildHostType(String value) {
        set(13, value);
    }

    /**
     * Getter for <code>public.teamcity_build.build_host_type</code>.
     */
    public String getBuildHostType() {
        return (String) get(13);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record14 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row14<String, String, OffsetDateTime, OffsetDateTime, OffsetDateTime, String, String, String, String, String, String[], Boolean, String, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    @Override
    public Row14<String, String, OffsetDateTime, OffsetDateTime, OffsetDateTime, String, String, String, String, String, String[], Boolean, String, String> valuesRow() {
        return (Row14) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return TeamcityBuild.TEAMCITY_BUILD.BUILD_ID;
    }

    @Override
    public Field<String> field2() {
        return TeamcityBuild.TEAMCITY_BUILD.CONFIGURATION;
    }

    @Override
    public Field<OffsetDateTime> field3() {
        return TeamcityBuild.TEAMCITY_BUILD.QUEUED;
    }

    @Override
    public Field<OffsetDateTime> field4() {
        return TeamcityBuild.TEAMCITY_BUILD.STARTED;
    }

    @Override
    public Field<OffsetDateTime> field5() {
        return TeamcityBuild.TEAMCITY_BUILD.FINISHED;
    }

    @Override
    public Field<String> field6() {
        return TeamcityBuild.TEAMCITY_BUILD.STATE;
    }

    @Override
    public Field<String> field7() {
        return TeamcityBuild.TEAMCITY_BUILD.STATUS;
    }

    @Override
    public Field<String> field8() {
        return TeamcityBuild.TEAMCITY_BUILD.STATUS_TEXT;
    }

    @Override
    public Field<String> field9() {
        return TeamcityBuild.TEAMCITY_BUILD.BRANCH;
    }

    @Override
    public Field<String> field10() {
        return TeamcityBuild.TEAMCITY_BUILD.GIT_COMMIT_ID;
    }

    @Override
    public Field<String[]> field11() {
        return TeamcityBuild.TEAMCITY_BUILD.BUILDSCAN_URLS;
    }

    @Override
    public Field<Boolean> field12() {
        return TeamcityBuild.TEAMCITY_BUILD.COMPOSITE;
    }

    @Override
    public Field<String> field13() {
        return TeamcityBuild.TEAMCITY_BUILD.BUILD_HOST_NAME;
    }

    @Override
    public Field<String> field14() {
        return TeamcityBuild.TEAMCITY_BUILD.BUILD_HOST_TYPE;
    }

    @Override
    public String component1() {
        return getBuildId();
    }

    @Override
    public String component2() {
        return getConfiguration();
    }

    @Override
    public OffsetDateTime component3() {
        return getQueued();
    }

    @Override
    public OffsetDateTime component4() {
        return getStarted();
    }

    @Override
    public OffsetDateTime component5() {
        return getFinished();
    }

    @Override
    public String component6() {
        return getState();
    }

    @Override
    public String component7() {
        return getStatus();
    }

    @Override
    public String component8() {
        return getStatusText();
    }

    @Override
    public String component9() {
        return getBranch();
    }

    @Override
    public String component10() {
        return getGitCommitId();
    }

    @Override
    public String[] component11() {
        return getBuildscanUrls();
    }

    @Override
    public Boolean component12() {
        return getComposite();
    }

    @Override
    public String component13() {
        return getBuildHostName();
    }

    @Override
    public String component14() {
        return getBuildHostType();
    }

    @Override
    public String value1() {
        return getBuildId();
    }

    @Override
    public String value2() {
        return getConfiguration();
    }

    @Override
    public OffsetDateTime value3() {
        return getQueued();
    }

    @Override
    public OffsetDateTime value4() {
        return getStarted();
    }

    @Override
    public OffsetDateTime value5() {
        return getFinished();
    }

    @Override
    public String value6() {
        return getState();
    }

    @Override
    public String value7() {
        return getStatus();
    }

    @Override
    public String value8() {
        return getStatusText();
    }

    @Override
    public String value9() {
        return getBranch();
    }

    @Override
    public String value10() {
        return getGitCommitId();
    }

    @Override
    public String[] value11() {
        return getBuildscanUrls();
    }

    @Override
    public Boolean value12() {
        return getComposite();
    }

    @Override
    public String value13() {
        return getBuildHostName();
    }

    @Override
    public String value14() {
        return getBuildHostType();
    }

    @Override
    public TeamcityBuildRecord value1(String value) {
        setBuildId(value);
        return this;
    }

    @Override
    public TeamcityBuildRecord value2(String value) {
        setConfiguration(value);
        return this;
    }

    @Override
    public TeamcityBuildRecord value3(OffsetDateTime value) {
        setQueued(value);
        return this;
    }

    @Override
    public TeamcityBuildRecord value4(OffsetDateTime value) {
        setStarted(value);
        return this;
    }

    @Override
    public TeamcityBuildRecord value5(OffsetDateTime value) {
        setFinished(value);
        return this;
    }

    @Override
    public TeamcityBuildRecord value6(String value) {
        setState(value);
        return this;
    }

    @Override
    public TeamcityBuildRecord value7(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public TeamcityBuildRecord value8(String value) {
        setStatusText(value);
        return this;
    }

    @Override
    public TeamcityBuildRecord value9(String value) {
        setBranch(value);
        return this;
    }

    @Override
    public TeamcityBuildRecord value10(String value) {
        setGitCommitId(value);
        return this;
    }

    @Override
    public TeamcityBuildRecord value11(String[] value) {
        setBuildscanUrls(value);
        return this;
    }

    @Override
    public TeamcityBuildRecord value12(Boolean value) {
        setComposite(value);
        return this;
    }

    @Override
    public TeamcityBuildRecord value13(String value) {
        setBuildHostName(value);
        return this;
    }

    @Override
    public TeamcityBuildRecord value14(String value) {
        setBuildHostType(value);
        return this;
    }

    @Override
    public TeamcityBuildRecord values(String value1, String value2, OffsetDateTime value3, OffsetDateTime value4, OffsetDateTime value5, String value6, String value7, String value8, String value9, String value10, String[] value11, Boolean value12, String value13, String value14) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TeamcityBuildRecord
     */
    public TeamcityBuildRecord() {
        super(TeamcityBuild.TEAMCITY_BUILD);
    }

    /**
     * Create a detached, initialised TeamcityBuildRecord
     */
    public TeamcityBuildRecord(String buildId, String configuration, OffsetDateTime queued, OffsetDateTime started, OffsetDateTime finished, String state, String status, String statusText, String branch, String gitCommitId, String[] buildscanUrls, Boolean composite, String buildHostName, String buildHostType) {
        super(TeamcityBuild.TEAMCITY_BUILD);

        setBuildId(buildId);
        setConfiguration(configuration);
        setQueued(queued);
        setStarted(started);
        setFinished(finished);
        setState(state);
        setStatus(status);
        setStatusText(statusText);
        setBranch(branch);
        setGitCommitId(gitCommitId);
        setBuildscanUrls(buildscanUrls);
        setComposite(composite);
        setBuildHostName(buildHostName);
        setBuildHostType(buildHostType);
        resetChangedOnNotNull();
    }
}
