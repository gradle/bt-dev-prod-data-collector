/*
 * This file is generated by jOOQ.
 */
package org.gradle.devprod.collector.persistence.generated.jooq.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.gradle.devprod.collector.persistence.generated.jooq.Indexes;
import org.gradle.devprod.collector.persistence.generated.jooq.Keys;
import org.gradle.devprod.collector.persistence.generated.jooq.Public;
import org.gradle.devprod.collector.persistence.generated.jooq.tables.records.BuildRecord;
import org.gradle.devprod.collector.persistence.generated.jooq.udt.records.KeyValueRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function18;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Build extends TableImpl<BuildRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.build</code>
     */
    public static final Build BUILD = new Build();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BuildRecord> getRecordType() {
        return BuildRecord.class;
    }

    /**
     * The column <code>public.build.build_id</code>.
     */
    public final TableField<BuildRecord, String> BUILD_ID = createField(DSL.name("build_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.build.root_project</code>.
     */
    public final TableField<BuildRecord, String> ROOT_PROJECT = createField(DSL.name("root_project"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.build.path_to_first_test_task</code>.
     */
    public final TableField<BuildRecord, String> PATH_TO_FIRST_TEST_TASK = createField(DSL.name("path_to_first_test_task"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.build.time_to_first_test_task</code>.
     */
    public final TableField<BuildRecord, Long> TIME_TO_FIRST_TEST_TASK = createField(DSL.name("time_to_first_test_task"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.build.build_start</code>.
     */
    public final TableField<BuildRecord, OffsetDateTime> BUILD_START = createField(DSL.name("build_start"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.build.build_finish</code>.
     */
    public final TableField<BuildRecord, OffsetDateTime> BUILD_FINISH = createField(DSL.name("build_finish"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.build.username</code>.
     */
    public final TableField<BuildRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.build.host</code>.
     */
    public final TableField<BuildRecord, String> HOST = createField(DSL.name("host"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.build.daemon_age</code>.
     */
    public final TableField<BuildRecord, Integer> DAEMON_AGE = createField(DSL.name("daemon_age"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.build.daemon_unhealthy_reason</code>.
     */
    public final TableField<BuildRecord, String> DAEMON_UNHEALTHY_REASON = createField(DSL.name("daemon_unhealthy_reason"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.build.gradle_version</code>.
     */
    public final TableField<BuildRecord, String> GRADLE_VERSION = createField(DSL.name("gradle_version"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.build.tags</code>.
     */
    public final TableField<BuildRecord, String[]> TAGS = createField(DSL.name("tags"), SQLDataType.VARCHAR(255).array(), this, "");

    /**
     * The column <code>public.build.custom_values</code>.
     */
    public final TableField<BuildRecord, KeyValueRecord[]> CUSTOM_VALUES = createField(DSL.name("custom_values"), org.gradle.devprod.collector.persistence.generated.jooq.udt.KeyValue.KEY_VALUE.getDataType().array(), this, "");

    /**
     * The column <code>public.build.successful</code>.
     */
    public final TableField<BuildRecord, Boolean> SUCCESSFUL = createField(DSL.name("successful"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.build.build_cache_load_failure</code>.
     */
    public final TableField<BuildRecord, Boolean> BUILD_CACHE_LOAD_FAILURE = createField(DSL.name("build_cache_load_failure"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.build.build_cache_store_failure</code>.
     */
    public final TableField<BuildRecord, Boolean> BUILD_CACHE_STORE_FAILURE = createField(DSL.name("build_cache_store_failure"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.build.executed_test_tasks</code>.
     */
    public final TableField<BuildRecord, String[]> EXECUTED_TEST_TASKS = createField(DSL.name("executed_test_tasks"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'{}'::character varying[]"), SQLDataType.VARCHAR)).array(), this, "");

    /**
     * The column <code>public.build.unexpected_caching_disabled_reasons</code>.
     */
    public final TableField<BuildRecord, String[]> UNEXPECTED_CACHING_DISABLED_REASONS = createField(DSL.name("unexpected_caching_disabled_reasons"), SQLDataType.VARCHAR(255).array(), this, "");

    private Build(Name alias, Table<BuildRecord> aliased) {
        this(alias, aliased, null);
    }

    private Build(Name alias, Table<BuildRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.build</code> table reference
     */
    public Build(String alias) {
        this(DSL.name(alias), BUILD);
    }

    /**
     * Create an aliased <code>public.build</code> table reference
     */
    public Build(Name alias) {
        this(alias, BUILD);
    }

    /**
     * Create a <code>public.build</code> table reference
     */
    public Build() {
        this(DSL.name("build"), null);
    }

    public <O extends Record> Build(Table<O> child, ForeignKey<O, BuildRecord> key) {
        super(child, key, BUILD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.BUILD_FINISH_IDX, Indexes.BUILD_START_IDX);
    }

    @Override
    public UniqueKey<BuildRecord> getPrimaryKey() {
        return Keys.BUILD_PK;
    }

    @Override
    public Build as(String alias) {
        return new Build(DSL.name(alias), this);
    }

    @Override
    public Build as(Name alias) {
        return new Build(alias, this);
    }

    @Override
    public Build as(Table<?> alias) {
        return new Build(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Build rename(String name) {
        return new Build(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Build rename(Name name) {
        return new Build(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Build rename(Table<?> name) {
        return new Build(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<String, String, String, Long, OffsetDateTime, OffsetDateTime, String, String, Integer, String, String, String[], KeyValueRecord[], Boolean, Boolean, Boolean, String[], String[]> fieldsRow() {
        return (Row18) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function18<? super String, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? super String[], ? super KeyValueRecord[], ? super Boolean, ? super Boolean, ? super Boolean, ? super String[], ? super String[], ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function18<? super String, ? super String, ? super String, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? super String[], ? super KeyValueRecord[], ? super Boolean, ? super Boolean, ? super Boolean, ? super String[], ? super String[], ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
