/*
 * This file is generated by jOOQ.
 */
package org.gradle.devprod.collector.persistence.generated.jooq.tables.records;


import java.time.OffsetDateTime;

import org.gradle.devprod.collector.persistence.generated.jooq.tables.Build;
import org.gradle.devprod.collector.persistence.generated.jooq.udt.records.KeyValueRecord;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record18;
import org.jooq.Row18;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BuildRecord extends UpdatableRecordImpl<BuildRecord> implements Record18<String, String, String, Long, OffsetDateTime, OffsetDateTime, String, String, Integer, String, String, String[], KeyValueRecord[], Boolean, Boolean, Boolean, String[], String[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.build.build_id</code>.
     */
    public void setBuildId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.build.build_id</code>.
     */
    public String getBuildId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.build.root_project</code>.
     */
    public void setRootProject(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.build.root_project</code>.
     */
    public String getRootProject() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.build.path_to_first_test_task</code>.
     */
    public void setPathToFirstTestTask(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.build.path_to_first_test_task</code>.
     */
    public String getPathToFirstTestTask() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.build.time_to_first_test_task</code>.
     */
    public void setTimeToFirstTestTask(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.build.time_to_first_test_task</code>.
     */
    public Long getTimeToFirstTestTask() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>public.build.build_start</code>.
     */
    public void setBuildStart(OffsetDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.build.build_start</code>.
     */
    public OffsetDateTime getBuildStart() {
        return (OffsetDateTime) get(4);
    }

    /**
     * Setter for <code>public.build.build_finish</code>.
     */
    public void setBuildFinish(OffsetDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.build.build_finish</code>.
     */
    public OffsetDateTime getBuildFinish() {
        return (OffsetDateTime) get(5);
    }

    /**
     * Setter for <code>public.build.username</code>.
     */
    public void setUsername(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.build.username</code>.
     */
    public String getUsername() {
        return (String) get(6);
    }

    /**
     * Setter for <code>public.build.host</code>.
     */
    public void setHost(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.build.host</code>.
     */
    public String getHost() {
        return (String) get(7);
    }

    /**
     * Setter for <code>public.build.daemon_age</code>.
     */
    public void setDaemonAge(Integer value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.build.daemon_age</code>.
     */
    public Integer getDaemonAge() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>public.build.daemon_unhealthy_reason</code>.
     */
    public void setDaemonUnhealthyReason(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>public.build.daemon_unhealthy_reason</code>.
     */
    public String getDaemonUnhealthyReason() {
        return (String) get(9);
    }

    /**
     * Setter for <code>public.build.gradle_version</code>.
     */
    public void setGradleVersion(String value) {
        set(10, value);
    }

    /**
     * Getter for <code>public.build.gradle_version</code>.
     */
    public String getGradleVersion() {
        return (String) get(10);
    }

    /**
     * Setter for <code>public.build.tags</code>.
     */
    public void setTags(String[] value) {
        set(11, value);
    }

    /**
     * Getter for <code>public.build.tags</code>.
     */
    public String[] getTags() {
        return (String[]) get(11);
    }

    /**
     * Setter for <code>public.build.custom_values</code>.
     */
    public void setCustomValues(KeyValueRecord[] value) {
        set(12, value);
    }

    /**
     * Getter for <code>public.build.custom_values</code>.
     */
    public KeyValueRecord[] getCustomValues() {
        return (KeyValueRecord[]) get(12);
    }

    /**
     * Setter for <code>public.build.successful</code>.
     */
    public void setSuccessful(Boolean value) {
        set(13, value);
    }

    /**
     * Getter for <code>public.build.successful</code>.
     */
    public Boolean getSuccessful() {
        return (Boolean) get(13);
    }

    /**
     * Setter for <code>public.build.build_cache_load_failure</code>.
     */
    public void setBuildCacheLoadFailure(Boolean value) {
        set(14, value);
    }

    /**
     * Getter for <code>public.build.build_cache_load_failure</code>.
     */
    public Boolean getBuildCacheLoadFailure() {
        return (Boolean) get(14);
    }

    /**
     * Setter for <code>public.build.build_cache_store_failure</code>.
     */
    public void setBuildCacheStoreFailure(Boolean value) {
        set(15, value);
    }

    /**
     * Getter for <code>public.build.build_cache_store_failure</code>.
     */
    public Boolean getBuildCacheStoreFailure() {
        return (Boolean) get(15);
    }

    /**
     * Setter for <code>public.build.executed_test_tasks</code>.
     */
    public void setExecutedTestTasks(String[] value) {
        set(16, value);
    }

    /**
     * Getter for <code>public.build.executed_test_tasks</code>.
     */
    public String[] getExecutedTestTasks() {
        return (String[]) get(16);
    }

    /**
     * Setter for <code>public.build.unexpected_caching_disabled_reasons</code>.
     */
    public void setUnexpectedCachingDisabledReasons(String[] value) {
        set(17, value);
    }

    /**
     * Getter for <code>public.build.unexpected_caching_disabled_reasons</code>.
     */
    public String[] getUnexpectedCachingDisabledReasons() {
        return (String[]) get(17);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record18 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row18<String, String, String, Long, OffsetDateTime, OffsetDateTime, String, String, Integer, String, String, String[], KeyValueRecord[], Boolean, Boolean, Boolean, String[], String[]> fieldsRow() {
        return (Row18) super.fieldsRow();
    }

    @Override
    public Row18<String, String, String, Long, OffsetDateTime, OffsetDateTime, String, String, Integer, String, String, String[], KeyValueRecord[], Boolean, Boolean, Boolean, String[], String[]> valuesRow() {
        return (Row18) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Build.BUILD.BUILD_ID;
    }

    @Override
    public Field<String> field2() {
        return Build.BUILD.ROOT_PROJECT;
    }

    @Override
    public Field<String> field3() {
        return Build.BUILD.PATH_TO_FIRST_TEST_TASK;
    }

    @Override
    public Field<Long> field4() {
        return Build.BUILD.TIME_TO_FIRST_TEST_TASK;
    }

    @Override
    public Field<OffsetDateTime> field5() {
        return Build.BUILD.BUILD_START;
    }

    @Override
    public Field<OffsetDateTime> field6() {
        return Build.BUILD.BUILD_FINISH;
    }

    @Override
    public Field<String> field7() {
        return Build.BUILD.USERNAME;
    }

    @Override
    public Field<String> field8() {
        return Build.BUILD.HOST;
    }

    @Override
    public Field<Integer> field9() {
        return Build.BUILD.DAEMON_AGE;
    }

    @Override
    public Field<String> field10() {
        return Build.BUILD.DAEMON_UNHEALTHY_REASON;
    }

    @Override
    public Field<String> field11() {
        return Build.BUILD.GRADLE_VERSION;
    }

    @Override
    public Field<String[]> field12() {
        return Build.BUILD.TAGS;
    }

    @Override
    public Field<KeyValueRecord[]> field13() {
        return Build.BUILD.CUSTOM_VALUES;
    }

    @Override
    public Field<Boolean> field14() {
        return Build.BUILD.SUCCESSFUL;
    }

    @Override
    public Field<Boolean> field15() {
        return Build.BUILD.BUILD_CACHE_LOAD_FAILURE;
    }

    @Override
    public Field<Boolean> field16() {
        return Build.BUILD.BUILD_CACHE_STORE_FAILURE;
    }

    @Override
    public Field<String[]> field17() {
        return Build.BUILD.EXECUTED_TEST_TASKS;
    }

    @Override
    public Field<String[]> field18() {
        return Build.BUILD.UNEXPECTED_CACHING_DISABLED_REASONS;
    }

    @Override
    public String component1() {
        return getBuildId();
    }

    @Override
    public String component2() {
        return getRootProject();
    }

    @Override
    public String component3() {
        return getPathToFirstTestTask();
    }

    @Override
    public Long component4() {
        return getTimeToFirstTestTask();
    }

    @Override
    public OffsetDateTime component5() {
        return getBuildStart();
    }

    @Override
    public OffsetDateTime component6() {
        return getBuildFinish();
    }

    @Override
    public String component7() {
        return getUsername();
    }

    @Override
    public String component8() {
        return getHost();
    }

    @Override
    public Integer component9() {
        return getDaemonAge();
    }

    @Override
    public String component10() {
        return getDaemonUnhealthyReason();
    }

    @Override
    public String component11() {
        return getGradleVersion();
    }

    @Override
    public String[] component12() {
        return getTags();
    }

    @Override
    public KeyValueRecord[] component13() {
        return getCustomValues();
    }

    @Override
    public Boolean component14() {
        return getSuccessful();
    }

    @Override
    public Boolean component15() {
        return getBuildCacheLoadFailure();
    }

    @Override
    public Boolean component16() {
        return getBuildCacheStoreFailure();
    }

    @Override
    public String[] component17() {
        return getExecutedTestTasks();
    }

    @Override
    public String[] component18() {
        return getUnexpectedCachingDisabledReasons();
    }

    @Override
    public String value1() {
        return getBuildId();
    }

    @Override
    public String value2() {
        return getRootProject();
    }

    @Override
    public String value3() {
        return getPathToFirstTestTask();
    }

    @Override
    public Long value4() {
        return getTimeToFirstTestTask();
    }

    @Override
    public OffsetDateTime value5() {
        return getBuildStart();
    }

    @Override
    public OffsetDateTime value6() {
        return getBuildFinish();
    }

    @Override
    public String value7() {
        return getUsername();
    }

    @Override
    public String value8() {
        return getHost();
    }

    @Override
    public Integer value9() {
        return getDaemonAge();
    }

    @Override
    public String value10() {
        return getDaemonUnhealthyReason();
    }

    @Override
    public String value11() {
        return getGradleVersion();
    }

    @Override
    public String[] value12() {
        return getTags();
    }

    @Override
    public KeyValueRecord[] value13() {
        return getCustomValues();
    }

    @Override
    public Boolean value14() {
        return getSuccessful();
    }

    @Override
    public Boolean value15() {
        return getBuildCacheLoadFailure();
    }

    @Override
    public Boolean value16() {
        return getBuildCacheStoreFailure();
    }

    @Override
    public String[] value17() {
        return getExecutedTestTasks();
    }

    @Override
    public String[] value18() {
        return getUnexpectedCachingDisabledReasons();
    }

    @Override
    public BuildRecord value1(String value) {
        setBuildId(value);
        return this;
    }

    @Override
    public BuildRecord value2(String value) {
        setRootProject(value);
        return this;
    }

    @Override
    public BuildRecord value3(String value) {
        setPathToFirstTestTask(value);
        return this;
    }

    @Override
    public BuildRecord value4(Long value) {
        setTimeToFirstTestTask(value);
        return this;
    }

    @Override
    public BuildRecord value5(OffsetDateTime value) {
        setBuildStart(value);
        return this;
    }

    @Override
    public BuildRecord value6(OffsetDateTime value) {
        setBuildFinish(value);
        return this;
    }

    @Override
    public BuildRecord value7(String value) {
        setUsername(value);
        return this;
    }

    @Override
    public BuildRecord value8(String value) {
        setHost(value);
        return this;
    }

    @Override
    public BuildRecord value9(Integer value) {
        setDaemonAge(value);
        return this;
    }

    @Override
    public BuildRecord value10(String value) {
        setDaemonUnhealthyReason(value);
        return this;
    }

    @Override
    public BuildRecord value11(String value) {
        setGradleVersion(value);
        return this;
    }

    @Override
    public BuildRecord value12(String[] value) {
        setTags(value);
        return this;
    }

    @Override
    public BuildRecord value13(KeyValueRecord[] value) {
        setCustomValues(value);
        return this;
    }

    @Override
    public BuildRecord value14(Boolean value) {
        setSuccessful(value);
        return this;
    }

    @Override
    public BuildRecord value15(Boolean value) {
        setBuildCacheLoadFailure(value);
        return this;
    }

    @Override
    public BuildRecord value16(Boolean value) {
        setBuildCacheStoreFailure(value);
        return this;
    }

    @Override
    public BuildRecord value17(String[] value) {
        setExecutedTestTasks(value);
        return this;
    }

    @Override
    public BuildRecord value18(String[] value) {
        setUnexpectedCachingDisabledReasons(value);
        return this;
    }

    @Override
    public BuildRecord values(String value1, String value2, String value3, Long value4, OffsetDateTime value5, OffsetDateTime value6, String value7, String value8, Integer value9, String value10, String value11, String[] value12, KeyValueRecord[] value13, Boolean value14, Boolean value15, Boolean value16, String[] value17, String[] value18) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BuildRecord
     */
    public BuildRecord() {
        super(Build.BUILD);
    }

    /**
     * Create a detached, initialised BuildRecord
     */
    public BuildRecord(String buildId, String rootProject, String pathToFirstTestTask, Long timeToFirstTestTask, OffsetDateTime buildStart, OffsetDateTime buildFinish, String username, String host, Integer daemonAge, String daemonUnhealthyReason, String gradleVersion, String[] tags, KeyValueRecord[] customValues, Boolean successful, Boolean buildCacheLoadFailure, Boolean buildCacheStoreFailure, String[] executedTestTasks, String[] unexpectedCachingDisabledReasons) {
        super(Build.BUILD);

        setBuildId(buildId);
        setRootProject(rootProject);
        setPathToFirstTestTask(pathToFirstTestTask);
        setTimeToFirstTestTask(timeToFirstTestTask);
        setBuildStart(buildStart);
        setBuildFinish(buildFinish);
        setUsername(username);
        setHost(host);
        setDaemonAge(daemonAge);
        setDaemonUnhealthyReason(daemonUnhealthyReason);
        setGradleVersion(gradleVersion);
        setTags(tags);
        setCustomValues(customValues);
        setSuccessful(successful);
        setBuildCacheLoadFailure(buildCacheLoadFailure);
        setBuildCacheStoreFailure(buildCacheStoreFailure);
        setExecutedTestTasks(executedTestTasks);
        setUnexpectedCachingDisabledReasons(unexpectedCachingDisabledReasons);
        resetChangedOnNotNull();
    }
}
