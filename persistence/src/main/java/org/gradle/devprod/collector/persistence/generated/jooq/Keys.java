/*
 * This file is generated by jOOQ.
 */
package org.gradle.devprod.collector.persistence.generated.jooq;


import org.gradle.devprod.collector.persistence.generated.jooq.tables.Build;
import org.gradle.devprod.collector.persistence.generated.jooq.tables.FlakyTestClass;
import org.gradle.devprod.collector.persistence.generated.jooq.tables.LongTest;
import org.gradle.devprod.collector.persistence.generated.jooq.tables.PreconditionTest;
import org.gradle.devprod.collector.persistence.generated.jooq.tables.TeamcityBuild;
import org.gradle.devprod.collector.persistence.generated.jooq.tables.records.BuildRecord;
import org.gradle.devprod.collector.persistence.generated.jooq.tables.records.FlakyTestClassRecord;
import org.gradle.devprod.collector.persistence.generated.jooq.tables.records.LongTestRecord;
import org.gradle.devprod.collector.persistence.generated.jooq.tables.records.PreconditionTestRecord;
import org.gradle.devprod.collector.persistence.generated.jooq.tables.records.TeamcityBuildRecord;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BuildRecord> BUILD_PK = Internal.createUniqueKey(Build.BUILD, DSL.name("build_pk"), new TableField[] { Build.BUILD.BUILD_ID }, true);
    public static final UniqueKey<FlakyTestClassRecord> FLAKY_TEST_CLASS_PKEY = Internal.createUniqueKey(FlakyTestClass.FLAKY_TEST_CLASS, DSL.name("flaky_test_class_pkey"), new TableField[] { FlakyTestClass.FLAKY_TEST_CLASS.BUILD_ID, FlakyTestClass.FLAKY_TEST_CLASS.FLAKY_TEST_FQCN }, true);
    public static final UniqueKey<LongTestRecord> LONG_TEST_PK = Internal.createUniqueKey(LongTest.LONG_TEST, DSL.name("long_test_pk"), new TableField[] { LongTest.LONG_TEST.BUILD_ID, LongTest.LONG_TEST.CLASS_NAME }, true);
    public static final UniqueKey<PreconditionTestRecord> PRECONDITION_TEST_PKEY = Internal.createUniqueKey(PreconditionTest.PRECONDITION_TEST, DSL.name("precondition_test_pkey"), new TableField[] { PreconditionTest.PRECONDITION_TEST.BUILD_ID, PreconditionTest.PRECONDITION_TEST.CLASS_NAME, PreconditionTest.PRECONDITION_TEST.PRECONDITIONS, PreconditionTest.PRECONDITION_TEST.TASK_PATH }, true);
    public static final UniqueKey<TeamcityBuildRecord> TEAMCITY_BUILD_PK = Internal.createUniqueKey(TeamcityBuild.TEAMCITY_BUILD, DSL.name("teamcity_build_pk"), new TableField[] { TeamcityBuild.TEAMCITY_BUILD.BUILD_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<FlakyTestClassRecord, BuildRecord> FLAKY_TEST_CLASS__FLAKY_TEST_CLASS_BUILD_ID_FKEY = Internal.createForeignKey(FlakyTestClass.FLAKY_TEST_CLASS, DSL.name("flaky_test_class_build_id_fkey"), new TableField[] { FlakyTestClass.FLAKY_TEST_CLASS.BUILD_ID }, Keys.BUILD_PK, new TableField[] { Build.BUILD.BUILD_ID }, true);
    public static final ForeignKey<LongTestRecord, BuildRecord> LONG_TEST__LONG_TEST_BUILD_FK = Internal.createForeignKey(LongTest.LONG_TEST, DSL.name("long_test_build_fk"), new TableField[] { LongTest.LONG_TEST.BUILD_ID }, Keys.BUILD_PK, new TableField[] { Build.BUILD.BUILD_ID }, true);
    public static final ForeignKey<PreconditionTestRecord, BuildRecord> PRECONDITION_TEST__PRECONDITION_TEST_BUILD_ID_FKEY = Internal.createForeignKey(PreconditionTest.PRECONDITION_TEST, DSL.name("precondition_test_build_id_fkey"), new TableField[] { PreconditionTest.PRECONDITION_TEST.BUILD_ID }, Keys.BUILD_PK, new TableField[] { Build.BUILD.BUILD_ID }, true);
}
