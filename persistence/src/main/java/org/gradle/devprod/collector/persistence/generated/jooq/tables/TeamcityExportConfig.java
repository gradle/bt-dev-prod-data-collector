/*
 * This file is generated by jOOQ.
 */
package org.gradle.devprod.collector.persistence.generated.jooq.tables;


import java.time.OffsetDateTime;
import java.util.function.Function;

import org.gradle.devprod.collector.persistence.generated.jooq.Keys;
import org.gradle.devprod.collector.persistence.generated.jooq.Public;
import org.gradle.devprod.collector.persistence.generated.jooq.tables.records.TeamcityExportConfigRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TeamcityExportConfig extends TableImpl<TeamcityExportConfigRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.teamcity_export_config</code>
     */
    public static final TeamcityExportConfig TEAMCITY_EXPORT_CONFIG = new TeamcityExportConfig();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeamcityExportConfigRecord> getRecordType() {
        return TeamcityExportConfigRecord.class;
    }

    /**
     * The column <code>public.teamcity_export_config.project_id</code>.
     */
    public final TableField<TeamcityExportConfigRecord, String> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column
     * <code>public.teamcity_export_config.latest_finished_build_timestamp</code>.
     */
    public final TableField<TeamcityExportConfigRecord, OffsetDateTime> LATEST_FINISHED_BUILD_TIMESTAMP = createField(DSL.name("latest_finished_build_timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private TeamcityExportConfig(Name alias, Table<TeamcityExportConfigRecord> aliased) {
        this(alias, aliased, null);
    }

    private TeamcityExportConfig(Name alias, Table<TeamcityExportConfigRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.teamcity_export_config</code> table
     * reference
     */
    public TeamcityExportConfig(String alias) {
        this(DSL.name(alias), TEAMCITY_EXPORT_CONFIG);
    }

    /**
     * Create an aliased <code>public.teamcity_export_config</code> table
     * reference
     */
    public TeamcityExportConfig(Name alias) {
        this(alias, TEAMCITY_EXPORT_CONFIG);
    }

    /**
     * Create a <code>public.teamcity_export_config</code> table reference
     */
    public TeamcityExportConfig() {
        this(DSL.name("teamcity_export_config"), null);
    }

    public <O extends Record> TeamcityExportConfig(Table<O> child, ForeignKey<O, TeamcityExportConfigRecord> key) {
        super(child, key, TEAMCITY_EXPORT_CONFIG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TeamcityExportConfigRecord> getPrimaryKey() {
        return Keys.TEAMCITY_EXPORT_CONFIG_PKEY;
    }

    @Override
    public TeamcityExportConfig as(String alias) {
        return new TeamcityExportConfig(DSL.name(alias), this);
    }

    @Override
    public TeamcityExportConfig as(Name alias) {
        return new TeamcityExportConfig(alias, this);
    }

    @Override
    public TeamcityExportConfig as(Table<?> alias) {
        return new TeamcityExportConfig(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamcityExportConfig rename(String name) {
        return new TeamcityExportConfig(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamcityExportConfig rename(Name name) {
        return new TeamcityExportConfig(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamcityExportConfig rename(Table<?> name) {
        return new TeamcityExportConfig(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, OffsetDateTime> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super String, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super String, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
