/*
 * This file is generated by jOOQ.
 */
package org.gradle.devprod.collector.persistence.generated.jooq.tables;


import java.time.OffsetDateTime;
import java.util.function.Function;

import org.gradle.devprod.collector.persistence.generated.jooq.Keys;
import org.gradle.devprod.collector.persistence.generated.jooq.Public;
import org.gradle.devprod.collector.persistence.generated.jooq.tables.records.PreconditionProbingRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PreconditionProbing extends TableImpl<PreconditionProbingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.precondition_probing</code>
     */
    public static final PreconditionProbing PRECONDITION_PROBING = new PreconditionProbing();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PreconditionProbingRecord> getRecordType() {
        return PreconditionProbingRecord.class;
    }

    /**
     * The column <code>public.precondition_probing.preconditions</code>.
     */
    public final TableField<PreconditionProbingRecord, String[]> PRECONDITIONS = createField(DSL.name("preconditions"), SQLDataType.CLOB.nullable(false).array(), this, "");

    /**
     * The column <code>public.precondition_probing.host</code>.
     */
    public final TableField<PreconditionProbingRecord, String> HOST = createField(DSL.name("host"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.precondition_probing.test_class</code>.
     */
    public final TableField<PreconditionProbingRecord, String> TEST_CLASS = createField(DSL.name("test_class"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.precondition_probing.test_task</code>.
     */
    public final TableField<PreconditionProbingRecord, String> TEST_TASK = createField(DSL.name("test_task"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>public.precondition_probing.last_executed</code>.
     */
    public final TableField<PreconditionProbingRecord, OffsetDateTime> LAST_EXECUTED = createField(DSL.name("last_executed"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.precondition_probing.last_skipped</code>.
     */
    public final TableField<PreconditionProbingRecord, OffsetDateTime> LAST_SKIPPED = createField(DSL.name("last_skipped"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.precondition_probing.last_failed</code>.
     */
    public final TableField<PreconditionProbingRecord, OffsetDateTime> LAST_FAILED = createField(DSL.name("last_failed"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.precondition_probing.last_succeeded</code>.
     */
    public final TableField<PreconditionProbingRecord, OffsetDateTime> LAST_SUCCEEDED = createField(DSL.name("last_succeeded"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private PreconditionProbing(Name alias, Table<PreconditionProbingRecord> aliased) {
        this(alias, aliased, null);
    }

    private PreconditionProbing(Name alias, Table<PreconditionProbingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.precondition_probing</code> table
     * reference
     */
    public PreconditionProbing(String alias) {
        this(DSL.name(alias), PRECONDITION_PROBING);
    }

    /**
     * Create an aliased <code>public.precondition_probing</code> table
     * reference
     */
    public PreconditionProbing(Name alias) {
        this(alias, PRECONDITION_PROBING);
    }

    /**
     * Create a <code>public.precondition_probing</code> table reference
     */
    public PreconditionProbing() {
        this(DSL.name("precondition_probing"), null);
    }

    public <O extends Record> PreconditionProbing(Table<O> child, ForeignKey<O, PreconditionProbingRecord> key) {
        super(child, key, PRECONDITION_PROBING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PreconditionProbingRecord> getPrimaryKey() {
        return Keys.PK_PRECONDITION_PROBING;
    }

    @Override
    public PreconditionProbing as(String alias) {
        return new PreconditionProbing(DSL.name(alias), this);
    }

    @Override
    public PreconditionProbing as(Name alias) {
        return new PreconditionProbing(alias, this);
    }

    @Override
    public PreconditionProbing as(Table<?> alias) {
        return new PreconditionProbing(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PreconditionProbing rename(String name) {
        return new PreconditionProbing(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PreconditionProbing rename(Name name) {
        return new PreconditionProbing(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PreconditionProbing rename(Table<?> name) {
        return new PreconditionProbing(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String[], String, String, String, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super String[], ? super String, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super String[], ? super String, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
