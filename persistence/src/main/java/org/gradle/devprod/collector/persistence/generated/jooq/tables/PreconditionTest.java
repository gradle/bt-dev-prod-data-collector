/*
 * This file is generated by jOOQ.
 */
package org.gradle.devprod.collector.persistence.generated.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.gradle.devprod.collector.persistence.generated.jooq.Keys;
import org.gradle.devprod.collector.persistence.generated.jooq.Public;
import org.gradle.devprod.collector.persistence.generated.jooq.tables.records.PreconditionTestRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PreconditionTest extends TableImpl<PreconditionTestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.precondition_test</code>
     */
    public static final PreconditionTest PRECONDITION_TEST = new PreconditionTest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PreconditionTestRecord> getRecordType() {
        return PreconditionTestRecord.class;
    }

    /**
     * The column <code>public.precondition_test.build_id</code>.
     */
    public final TableField<PreconditionTestRecord, String> BUILD_ID = createField(DSL.name("build_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.precondition_test.class_name</code>.
     */
    public final TableField<PreconditionTestRecord, String> CLASS_NAME = createField(DSL.name("class_name"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>public.precondition_test.preconditions</code>.
     */
    public final TableField<PreconditionTestRecord, String> PRECONDITIONS = createField(DSL.name("preconditions"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.precondition_test.skipped</code>.
     */
    public final TableField<PreconditionTestRecord, Boolean> SKIPPED = createField(DSL.name("skipped"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.precondition_test.failed</code>.
     */
    public final TableField<PreconditionTestRecord, Boolean> FAILED = createField(DSL.name("failed"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private PreconditionTest(Name alias, Table<PreconditionTestRecord> aliased) {
        this(alias, aliased, null);
    }

    private PreconditionTest(Name alias, Table<PreconditionTestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.precondition_test</code> table reference
     */
    public PreconditionTest(String alias) {
        this(DSL.name(alias), PRECONDITION_TEST);
    }

    /**
     * Create an aliased <code>public.precondition_test</code> table reference
     */
    public PreconditionTest(Name alias) {
        this(alias, PRECONDITION_TEST);
    }

    /**
     * Create a <code>public.precondition_test</code> table reference
     */
    public PreconditionTest() {
        this(DSL.name("precondition_test"), null);
    }

    public <O extends Record> PreconditionTest(Table<O> child, ForeignKey<O, PreconditionTestRecord> key) {
        super(child, key, PRECONDITION_TEST);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<PreconditionTestRecord> getPrimaryKey() {
        return Keys.PRECONDITION_TEST_PKEY;
    }

    @Override
    public List<UniqueKey<PreconditionTestRecord>> getKeys() {
        return Arrays.<UniqueKey<PreconditionTestRecord>>asList(Keys.PRECONDITION_TEST_PKEY);
    }

    @Override
    public List<ForeignKey<PreconditionTestRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PreconditionTestRecord, ?>>asList(Keys.PRECONDITION_TEST__PRECONDITION_TEST_BUILD_ID_FKEY);
    }

    private transient Build _build;

    public Build build() {
        if (_build == null)
            _build = new Build(this, Keys.PRECONDITION_TEST__PRECONDITION_TEST_BUILD_ID_FKEY);

        return _build;
    }

    @Override
    public PreconditionTest as(String alias) {
        return new PreconditionTest(DSL.name(alias), this);
    }

    @Override
    public PreconditionTest as(Name alias) {
        return new PreconditionTest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PreconditionTest rename(String name) {
        return new PreconditionTest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PreconditionTest rename(Name name) {
        return new PreconditionTest(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, Boolean, Boolean> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
