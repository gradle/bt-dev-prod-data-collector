/*
 * This file is generated by jOOQ.
 */
package org.gradle.devprod.collector.persistence.generated.jooq.tables.records;


import org.gradle.devprod.collector.persistence.generated.jooq.tables.PreconditionTest;
import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PreconditionTestRecord extends UpdatableRecordImpl<PreconditionTestRecord> implements Record5<String, String, String[], Boolean, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.precondition_test.build_id</code>.
     */
    public void setBuildId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.precondition_test.build_id</code>.
     */
    public String getBuildId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.precondition_test.class_name</code>.
     */
    public void setClassName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.precondition_test.class_name</code>.
     */
    public String getClassName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.precondition_test.preconditions</code>.
     */
    public void setPreconditions(String[] value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.precondition_test.preconditions</code>.
     */
    public String[] getPreconditions() {
        return (String[]) get(2);
    }

    /**
     * Setter for <code>public.precondition_test.skipped</code>.
     */
    public void setSkipped(Boolean value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.precondition_test.skipped</code>.
     */
    public Boolean getSkipped() {
        return (Boolean) get(3);
    }

    /**
     * Setter for <code>public.precondition_test.failed</code>.
     */
    public void setFailed(Boolean value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.precondition_test.failed</code>.
     */
    public Boolean getFailed() {
        return (Boolean) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record3<String, String, String[]> key() {
        return (Record3) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String[], Boolean, Boolean> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<String, String, String[], Boolean, Boolean> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return PreconditionTest.PRECONDITION_TEST.BUILD_ID;
    }

    @Override
    public Field<String> field2() {
        return PreconditionTest.PRECONDITION_TEST.CLASS_NAME;
    }

    @Override
    public Field<String[]> field3() {
        return PreconditionTest.PRECONDITION_TEST.PRECONDITIONS;
    }

    @Override
    public Field<Boolean> field4() {
        return PreconditionTest.PRECONDITION_TEST.SKIPPED;
    }

    @Override
    public Field<Boolean> field5() {
        return PreconditionTest.PRECONDITION_TEST.FAILED;
    }

    @Override
    public String component1() {
        return getBuildId();
    }

    @Override
    public String component2() {
        return getClassName();
    }

    @Override
    public String[] component3() {
        return getPreconditions();
    }

    @Override
    public Boolean component4() {
        return getSkipped();
    }

    @Override
    public Boolean component5() {
        return getFailed();
    }

    @Override
    public String value1() {
        return getBuildId();
    }

    @Override
    public String value2() {
        return getClassName();
    }

    @Override
    public String[] value3() {
        return getPreconditions();
    }

    @Override
    public Boolean value4() {
        return getSkipped();
    }

    @Override
    public Boolean value5() {
        return getFailed();
    }

    @Override
    public PreconditionTestRecord value1(String value) {
        setBuildId(value);
        return this;
    }

    @Override
    public PreconditionTestRecord value2(String value) {
        setClassName(value);
        return this;
    }

    @Override
    public PreconditionTestRecord value3(String[] value) {
        setPreconditions(value);
        return this;
    }

    @Override
    public PreconditionTestRecord value4(Boolean value) {
        setSkipped(value);
        return this;
    }

    @Override
    public PreconditionTestRecord value5(Boolean value) {
        setFailed(value);
        return this;
    }

    @Override
    public PreconditionTestRecord values(String value1, String value2, String[] value3, Boolean value4, Boolean value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PreconditionTestRecord
     */
    public PreconditionTestRecord() {
        super(PreconditionTest.PRECONDITION_TEST);
    }

    /**
     * Create a detached, initialised PreconditionTestRecord
     */
    public PreconditionTestRecord(String buildId, String className, String[] preconditions, Boolean skipped, Boolean failed) {
        super(PreconditionTest.PRECONDITION_TEST);

        setBuildId(buildId);
        setClassName(className);
        setPreconditions(preconditions);
        setSkipped(skipped);
        setFailed(failed);
        resetChangedOnNotNull();
    }
}
