/*
 * This file is generated by jOOQ.
 */
package org.gradle.devprod.enterprise.export.generated.jooq.tables.records;


import org.gradle.devprod.enterprise.export.generated.jooq.tables.TimeToFirstTask;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;

import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TimeToFirstTaskRecord extends UpdatableRecordImpl<TimeToFirstTaskRecord> implements Record5<String, String, String, Long, LocalDateTime> {

    private static final long serialVersionUID = -1503492170;

    /**
     * Setter for <code>public.time_to_first_task.build_id</code>.
     */
    public void setBuildId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.time_to_first_task.build_id</code>.
     */
    public String getBuildId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.time_to_first_task.project</code>.
     */
    public void setProject(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.time_to_first_task.project</code>.
     */
    public String getProject() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.time_to_first_task.path_to_test_task</code>.
     */
    public void setPathToTestTask(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.time_to_first_task.path_to_test_task</code>.
     */
    public String getPathToTestTask() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.time_to_first_task.time_to_first_task</code>.
     */
    public void setTimeToFirstTask(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.time_to_first_task.time_to_first_task</code>.
     */
    public Long getTimeToFirstTask() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>public.time_to_first_task.build_start</code>.
     */
    public void setBuildStart(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.time_to_first_task.build_start</code>.
     */
    public LocalDateTime getBuildStart() {
        return (LocalDateTime) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, Long, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<String, String, String, Long, LocalDateTime> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return TimeToFirstTask.TIME_TO_FIRST_TASK.BUILD_ID;
    }

    @Override
    public Field<String> field2() {
        return TimeToFirstTask.TIME_TO_FIRST_TASK.PROJECT;
    }

    @Override
    public Field<String> field3() {
        return TimeToFirstTask.TIME_TO_FIRST_TASK.PATH_TO_TEST_TASK;
    }

    @Override
    public Field<Long> field4() {
        return TimeToFirstTask.TIME_TO_FIRST_TASK.TIME_TO_FIRST_TASK_;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return TimeToFirstTask.TIME_TO_FIRST_TASK.BUILD_START;
    }

    @Override
    public String component1() {
        return getBuildId();
    }

    @Override
    public String component2() {
        return getProject();
    }

    @Override
    public String component3() {
        return getPathToTestTask();
    }

    @Override
    public Long component4() {
        return getTimeToFirstTask();
    }

    @Override
    public LocalDateTime component5() {
        return getBuildStart();
    }

    @Override
    public String value1() {
        return getBuildId();
    }

    @Override
    public String value2() {
        return getProject();
    }

    @Override
    public String value3() {
        return getPathToTestTask();
    }

    @Override
    public Long value4() {
        return getTimeToFirstTask();
    }

    @Override
    public LocalDateTime value5() {
        return getBuildStart();
    }

    @Override
    public TimeToFirstTaskRecord value1(String value) {
        setBuildId(value);
        return this;
    }

    @Override
    public TimeToFirstTaskRecord value2(String value) {
        setProject(value);
        return this;
    }

    @Override
    public TimeToFirstTaskRecord value3(String value) {
        setPathToTestTask(value);
        return this;
    }

    @Override
    public TimeToFirstTaskRecord value4(Long value) {
        setTimeToFirstTask(value);
        return this;
    }

    @Override
    public TimeToFirstTaskRecord value5(LocalDateTime value) {
        setBuildStart(value);
        return this;
    }

    @Override
    public TimeToFirstTaskRecord values(String value1, String value2, String value3, Long value4, LocalDateTime value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TimeToFirstTaskRecord
     */
    public TimeToFirstTaskRecord() {
        super(TimeToFirstTask.TIME_TO_FIRST_TASK);
    }

    /**
     * Create a detached, initialised TimeToFirstTaskRecord
     */
    public TimeToFirstTaskRecord(String buildId, String project, String pathToTestTask, Long timeToFirstTask, LocalDateTime buildStart) {
        super(TimeToFirstTask.TIME_TO_FIRST_TASK);

        set(0, buildId);
        set(1, project);
        set(2, pathToTestTask);
        set(3, timeToFirstTask);
        set(4, buildStart);
    }
}
